generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         String   @id @default(uuid())
  username   String @unique
  password   String    @default("123456")
  role        String @default("ADMIN")
}

model Student {
  id         String   @id @default(uuid())
  username   String @unique @db.VarChar(20)
  name       String
  role       String @default("STUDENT")
  password   String   @default("123456")
  surname    String
  sex        Gender
  address    String
  img        String?
  createdAt  DateTime @default(now())
  parentId   String
  parent     Parent   @relation(fields: [parentId], references: [id])
  classId    Int
  class      Class    @relation(fields: [classId], references: [id])
  gradeId    Int
  grade      Grade  @relation(fields: [gradeId], references: [id])
  attendance Attendance[]
  results     Result[]
  birthday    DateTime
}

model Teacher {
  id         String   @id @default(uuid())
  username   String @unique @db.VarChar(20)
  sex        Gender
  name       String
  role       String  @default("TEACHER")
  password   String   @default("123456")
  surname    String
  phone      String @unique
  email     String? @unique
  address    String
  img        String?
  createdAt  DateTime @default(now())
  subjects   Subject[]
  lessons    Lesson[]
  classes     Class[]
  birthday   DateTime
}

model Parent {
  id         String   @id @default(uuid())
  username   String @unique @db.VarChar(20)
  name       String
  role       String   @default("PARENT")
  password   String @default("123456")
  surname    String
  phone      String @unique
  email      String? @unique
  address    String
  students   Student[]
  createdAt DateTime @default(now())
  announcements Announcement[]
}

model Grade {
  id         Int     @id @default(autoincrement())
  level      Int @unique
  students   Student[]
  classes    Class[]
}
model Class {
  id         Int     @id @default(autoincrement())
  name       String @unique
  capacity    Int
  lessons    Lesson[]
  classTeacherId  String?
  classTeacher  Teacher? @relation(fields: [classTeacherId], references: [id], onDelete: Cascade)
  students   Student[]
  gradeId    Int
  grade      Grade  @relation(fields: [gradeId], references: [id])
  events     Event[] @relation("EventClasses")
  announcements Announcement[]
  subjects   Subject[] @relation("ClassSubjects")
}
model Subject {
  id         Int   @id @default(autoincrement())
  name       String @unique
  teachers   Teacher[]
  lessons     Lesson[]
  exams       Exams[]
  midTerms   MidTerm[]
  classes    Class[] @relation("ClassSubjects")
}

model Lesson {
  id         Int     @id @default(autoincrement())
  name       String?
  subjectId  Int
  dayOfWeek   Day
  startTime   DateTime
  endTime     DateTime
  subject    Subject @relation(fields: [subjectId], references: [id])
  classId    Int
  class      Class  @relation(fields: [classId], references: [id])
  teacherId  String
  teacher    Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  attendances Attendance[]
}

model Exams{
  id         Int     @id @default(autoincrement())
  title      String
  subjectId  Int
  subject    Subject @relation(fields: [subjectId], references: [id])
  result     Result[]
  startDate   DateTime
  endDate     DateTime
}

model MidTerm {
  id         Int     @id @default(autoincrement())
  title      String
  subjectId  Int
  result     Result[]
  subject    Subject @relation(fields: [subjectId], references: [id])
  startDate   DateTime
  dueDate     DateTime
}

model Result {
  id         Int     @id @default(autoincrement())
  marks      Int
  examId     Int?
  exam       Exams? @relation(fields: [examId], references: [id])
  midtermId  Int?
  midterm    MidTerm? @relation(fields: [midtermId], references: [id])
  studentId  String
  student    Student @relation(fields: [studentId], references: [id])
}

model Attendance{
  date       DateTime
  id         Int     @id @default(autoincrement())
  present    Boolean
  studentId  String
  student    Student @relation(fields: [studentId], references: [id])
  lessonId   Int
  lesson     Lesson @relation(fields: [lessonId], references: [id])
}
model Announcement {
  id         Int     @id @default(autoincrement())
  title      String
  description String
  date        DateTime @default(now())
  classId    Int?
  class      Class?  @relation(fields: [classId], references: [id])
  parentId   String?
  parent     Parent? @relation(fields: [parentId], references: [id])
}

model Event {
  id         Int     @id @default(autoincrement())
  title      String
  description String
  startDate  DateTime
  endDate    DateTime
  classes      Class[]  @relation("EventClasses")
}

enum Gender {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Role {
  ADMIN
  TEACHER
  PARENT
  STUDENT
}
