generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id @default(uuid())
  username String @unique
  password String @default("123456")
  role     String @default("ADMIN")
}

model Student {
  id         String       @id @default(uuid())
  username   String       @unique @db.VarChar(20)
  name       String
  surname    String
  sex        Gender
  address    String
  img        String?
  parentId   String
  createdAt  DateTime     @default(now())
  classId    Int
  gradeId    Int
  birthday   DateTime
  password   String       @default("123456")
  role       String       @default("STUDENT")
  attendance Attendance[]
  results    Result[]
  class      Class        @relation(fields: [classId], references: [id])
  grade      Grade        @relation(fields: [gradeId], references: [id])
  parent     Parent       @relation(fields: [parentId], references: [id])
}

model Teacher {
  id        String    @id @default(uuid())
  username  String    @unique @db.VarChar(20)
  sex       Gender
  name      String
  surname   String
  phone     String    @unique
  email     String?   @unique
  address   String
  img       String?
  createdAt DateTime  @default(now())
  birthday  DateTime
  password  String    @default("123456")
  role      String    @default("TEACHER")
  classes   Class[]
  lessons   Lesson[]
  subjects  Subject[] @relation("SubjectToTeacher")
}

model Parent {
  id            String         @id @default(uuid())
  username      String         @unique @db.VarChar(20)
  name          String
  surname       String
  phone         String         @unique
  email         String?        @unique
  address       String
  createdAt     DateTime       @default(now())
  password      String         @default("123456")
  role          String         @default("PARENT")
  announcements Announcement[]
  students      Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classes  Class[]
  students Student[]
}

model Class {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  capacity       Int
  gradeId        Int
  classTeacherId String?
  announcements  Announcement[]
  classTeacher   Teacher?       @relation(fields: [classTeacherId], references: [id], onDelete: Cascade)
  grade          Grade          @relation(fields: [gradeId], references: [id])
  lessons        Lesson[]
  students       Student[]
  subjects       Subject[]      @relation("ClassSubjects")
  events         Event[]        @relation("EventClasses")
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  exams    Exams[]
  lessons  Lesson[]
  midTerms MidTerm[]
  classes  Class[]   @relation("ClassSubjects")
  teachers Teacher[] @relation("SubjectToTeacher")
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String?
  subjectId   Int
  dayOfWeek   Day
  startTime   DateTime
  endTime     DateTime
  classId     Int
  teacherId   String
  attendances Attendance[]
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     Teacher      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model Exams {
  id        Int      @id @default(autoincrement())
  title     String
  subjectId Int
  startDate DateTime
  endDate   DateTime
  subject   Subject  @relation(fields: [subjectId], references: [id])
  result    Result[]
}

model MidTerm {
  id        Int      @id @default(autoincrement())
  title     String
  subjectId Int
  startDate DateTime
  dueDate   DateTime
  subject   Subject  @relation(fields: [subjectId], references: [id])
  result    Result[]
}

model Result {
  id        Int      @id @default(autoincrement())
  marks     Int
  examId    Int?
  midtermId Int?
  studentId String
  exam      Exams?   @relation(fields: [examId], references: [id])
  midterm   MidTerm? @relation(fields: [midtermId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  present   Boolean
  studentId String
  lessonId  Int
  date      DateTime
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime @default(now())
  classId     Int?
  parentId    String?
  class       Class?   @relation(fields: [classId], references: [id])
  parent      Parent?  @relation(fields: [parentId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  classes     Class[]  @relation("EventClasses")
}

enum Gender {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Role {
  ADMIN
  TEACHER
  PARENT
  STUDENT
}
